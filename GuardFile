guard 'rails' do
  watch('Gemfile.lock')
  watch(%r{^(config)/.*})
  watch(%r{^(lib)/.*})
end

guard 'livereload', override_url: true do
  watch(%r{app/views/.+.(erb|haml|slim)$})
  watch(%r{app/helpers/.+.rb})
  watch(%r{public/.+.(css|js|html)})
  watch(%r{config/locales/.+.yml})
  # Rails Assets Pipeline
  watch(%r{app/assets/javascripts/(.+.(\.js|html)).*})  { |m| "/assets/#{m[1]}" }
  watch(%r{app/assets/stylesheets/(.+.(\.css)).*})  { |m| "/assets/#{m[1]}" }
  # watch(%r{app/assets/javascripts/components/(.+.(\.js)).*}) { |m| "/assets/components/#{m[1]}" }
end

# Note: The cmd option is now required due to the increasing number of ways
#       rspec may be run, below are examples of the most common uses.
#  * bundler: 'bundle exec rspec'
#  * bundler binstubs: 'bin/rspec'
#  * spring: 'bin/rsspec' (This will use spring if running and you have
#                          installed the spring binstubs per the docs)
#  * zeus: 'zeus rspec' (requires the server to be started separetly)
#  * 'just' rspec: 'rspec'
guard :rspec, cmd: 'bundle exec rspec' do
  watch(%r{^spec/.+_spec.rb$})
  watch(%r{^lib/(.+).rb$})     { |m| "spec/lib/#{m[1]}_spec.rb" }
  watch('spec/rails_helper.rb')  { "spec" }

  # Rails example
  watch(%r{^app/(.+).rb$})                           { |m| "spec/#{m[1]}_spec.rb" }
  watch(%r{^app/(.*)(.erb|.haml|.slim)$})          { |m| "spec/#{m[1]}#{m[2]}_spec.rb" }
  watch(%r{^app/controllers/(.+)_(controller).rb$})  { |m| ["spec/routing/#{m[1]}_routing_spec.rb", "spec/#{m[2]}s/#{m[1]}_#{m[2]}_spec.rb", "spec/acceptance/#{m[1]}_spec.rb"] }
  watch(%r{^spec/support/(.+).rb$})                  { "spec" }
  watch('config/routes.rb')                           { "spec/routing" }
  watch('app/controllers/application_controller.rb')  { "spec/controllers" }
  watch('spec/rails_helper.rb')                       { "spec" }
  watch('app/models/overpass.rb') { "spec/controllers/speed_limit_controller_spec.rb" }

  # Capybara features specs
  watch(%r{^app/views/(.+)/.*.(erb|haml|slim)$})     { |m| "spec/features/#{m[1]}_spec.rb" }

  # Turnip features and steps
  watch(%r{^spec/acceptance/(.+).feature$})
  watch(%r{^spec/acceptance/steps/(.+)_steps.rb$})   { |m| Dir[File.join("**#{m[1]}.feature")][0] || 'spec/acceptance' }
end


### Guard::Sidekiq
#  available options:
#  - :verbose
#  - :queue (defaults to "default") can be an array
#  - :concurrency (defaults to 1)
#  - :timeout
#  - :environment (corresponds to RAILS_ENV for the Sidekiq worker)
# guard 'sidekiq', :environment => 'development' do
#   watch(%r{^workers/(.+).rb$})
# end
